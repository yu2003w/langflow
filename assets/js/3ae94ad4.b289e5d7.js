"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[7408],{42171:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>a,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Components/components-io","title":"Inputs and outputs","description":"This category of components defines where data enters and exits your flow. They dynamically alter the Playground and can be renamed to facilitate building and maintaining your flows.","source":"@site/docs/Components/components-io.md","sourceDirName":"Components","slug":"/components-io","permalink":"/components-io","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Inputs and outputs","slug":"/components-io"},"sidebar":"docs","previous":{"title":"Helpers","permalink":"/components-helpers"},"next":{"title":"Loaders","permalink":"/components-loaders"}}');var d=s(74848),i=s(28453);const r={title:"Inputs and outputs",slug:"/components-io"},l="Input and output components in Langflow",h={},c=[{value:"Chat Input",id:"chat-input",level:2},{value:"Inputs",id:"inputs",level:3},{value:"Outputs",id:"outputs",level:3},{value:"Text Input",id:"text-input",level:2},{value:"Inputs",id:"inputs-1",level:3},{value:"Outputs",id:"outputs-1",level:3},{value:"Chat Output",id:"chat-output",level:2},{value:"Inputs",id:"inputs-2",level:3},{value:"Outputs",id:"outputs-2",level:3},{value:"Text Output",id:"text-output",level:2},{value:"Inputs",id:"inputs-3",level:3},{value:"Outputs",id:"outputs-3",level:3}];function o(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.header,{children:(0,d.jsx)(t.h1,{id:"input-and-output-components-in-langflow",children:"Input and output components in Langflow"})}),"\n",(0,d.jsx)(t.p,{children:"This category of components defines where data enters and exits your flow. They dynamically alter the Playground and can be renamed to facilitate building and maintaining your flows."}),"\n",(0,d.jsx)(t.p,{children:"The difference between Chat Input and Text Input components is the output format, the number of configurable fields, and the way they are displayed in the Playground."}),"\n",(0,d.jsx)(t.h2,{id:"chat-input",children:"Chat Input"}),"\n",(0,d.jsx)(t.p,{children:"This component collects user input from the chat."}),"\n",(0,d.jsxs)(t.p,{children:["The Chat Input component creates a ",(0,d.jsx)(t.a,{href:"/concepts-objects",children:"Message"})," object that includes the input text, sender information, session ID, file attachments, and styling properties.\nIt can optionally store the message in a chat history and supports customization of the message appearance."]}),"\n",(0,d.jsx)(t.h3,{id:"inputs",children:"Inputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"}),(0,d.jsx)(t.th,{children:"Type"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"input_value"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"Message to be passed as input."}),(0,d.jsx)(t.td,{children:"MultilineInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"should_store_message"}),(0,d.jsx)(t.td,{children:"Store Messages"}),(0,d.jsx)(t.td,{children:"Store the message in the history."}),(0,d.jsx)(t.td,{children:"BoolInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"sender"}),(0,d.jsx)(t.td,{children:"Sender Type"}),(0,d.jsx)(t.td,{children:"Type of sender."}),(0,d.jsx)(t.td,{children:"DropdownInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"sender_name"}),(0,d.jsx)(t.td,{children:"Sender Name"}),(0,d.jsx)(t.td,{children:"Name of the sender."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"session_id"}),(0,d.jsx)(t.td,{children:"Session ID"}),(0,d.jsx)(t.td,{children:"The session ID of the chat. If empty, the current session ID parameter will be used."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"files"}),(0,d.jsx)(t.td,{children:"Files"}),(0,d.jsx)(t.td,{children:"Files to be sent with the message."}),(0,d.jsx)(t.td,{children:"FileInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"background_color"}),(0,d.jsx)(t.td,{children:"Background Color"}),(0,d.jsx)(t.td,{children:"The background color of the icon."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"chat_icon"}),(0,d.jsx)(t.td,{children:"Icon"}),(0,d.jsx)(t.td,{children:"The icon of the message."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"text_color"}),(0,d.jsx)(t.td,{children:"Text Color"}),(0,d.jsx)(t.td,{children:"The text color of the name"}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]})]})]}),"\n",(0,d.jsx)(t.h3,{id:"outputs",children:"Outputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"message"}),(0,d.jsx)(t.td,{children:"Message"}),(0,d.jsx)(t.td,{children:"The resulting chat message object with all specified properties."})]})})]}),"\n",(0,d.jsx)(t.h2,{id:"text-input",children:"Text Input"}),"\n",(0,d.jsx)(t.p,{children:"The Text Input component adds an Input field on the Playground."}),"\n",(0,d.jsx)(t.p,{children:"The Text Input component offers one input field for text, while the Chat Input has multiple fields for various chat-related features."}),"\n",(0,d.jsx)(t.h3,{id:"inputs-1",children:"Inputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"}),(0,d.jsx)(t.th,{children:"Type"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"input_value"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"Text to be passed as input."}),(0,d.jsx)(t.td,{children:"MultilineInput"})]})})]}),"\n",(0,d.jsx)(t.h3,{id:"outputs-1",children:"Outputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"text"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"The resulting text message."})]})})]}),"\n",(0,d.jsx)(t.h2,{id:"chat-output",children:"Chat Output"}),"\n",(0,d.jsxs)(t.p,{children:["The Chat Output component creates a ",(0,d.jsx)(t.a,{href:"/concepts-objects",children:"Message"})," object that includes the input text, sender information, session ID, and styling properties.\nIt can optionally store the message in a chat history and supports customization of the message appearance, including background color, icon, and text color."]}),"\n",(0,d.jsx)(t.h3,{id:"inputs-2",children:"Inputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"}),(0,d.jsx)(t.th,{children:"Type"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"input_value"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"Message to be passed as output."}),(0,d.jsx)(t.td,{children:"MessageInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"should_store_message"}),(0,d.jsx)(t.td,{children:"Store Messages"}),(0,d.jsx)(t.td,{children:"Store the message in the history."}),(0,d.jsx)(t.td,{children:"BoolInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"sender"}),(0,d.jsx)(t.td,{children:"Sender Type"}),(0,d.jsx)(t.td,{children:"Type of sender."}),(0,d.jsx)(t.td,{children:"DropdownInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"sender_name"}),(0,d.jsx)(t.td,{children:"Sender Name"}),(0,d.jsx)(t.td,{children:"Name of the sender."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"session_id"}),(0,d.jsx)(t.td,{children:"Session ID"}),(0,d.jsx)(t.td,{children:"The session ID of the chat. If empty, the current session ID parameter will be used."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"data_template"}),(0,d.jsx)(t.td,{children:"Data Template"}),(0,d.jsx)(t.td,{children:"Template to convert data to text. If left empty, it will be dynamically set to the data's text key."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"background_color"}),(0,d.jsx)(t.td,{children:"Background Color"}),(0,d.jsx)(t.td,{children:"The background color of the icon."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"chat_icon"}),(0,d.jsx)(t.td,{children:"Icon"}),(0,d.jsx)(t.td,{children:"The icon of the message."}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"text_color"}),(0,d.jsx)(t.td,{children:"Text Color"}),(0,d.jsx)(t.td,{children:"The text color of the name"}),(0,d.jsx)(t.td,{children:"MessageTextInput"})]})]})]}),"\n",(0,d.jsx)(t.h3,{id:"outputs-2",children:"Outputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"message"}),(0,d.jsx)(t.td,{children:"Message"}),(0,d.jsx)(t.td,{children:"The resulting chat message object with all specified properties."})]})})]}),"\n",(0,d.jsx)(t.h2,{id:"text-output",children:"Text Output"}),"\n",(0,d.jsxs)(t.p,{children:["The TextOutputComponent displays text output in the ",(0,d.jsx)(t.strong,{children:"Playground"}),".\nIt takes a single input of text and returns a ",(0,d.jsx)(t.a,{href:"/concepts-objects",children:"Message"})," object containing that text.\nThe component is simpler compared to the Chat Output but focuses solely on displaying text without additional chat-specific features or customizations."]}),"\n",(0,d.jsx)(t.h3,{id:"inputs-3",children:"Inputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"}),(0,d.jsx)(t.th,{children:"Type"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"input_value"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"Text to be passed as output."}),(0,d.jsx)(t.td,{children:"MultilineInput"})]})})]}),"\n",(0,d.jsx)(t.h3,{id:"outputs-3",children:"Outputs"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Name"}),(0,d.jsx)(t.th,{children:"Display Name"}),(0,d.jsx)(t.th,{children:"Info"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"text"}),(0,d.jsx)(t.td,{children:"Text"}),(0,d.jsx)(t.td,{children:"The resulting text message."})]})})]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(96540);const d={},i=n.createContext(d);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);